{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getFormList, getFormById, getFormResponse } from '../../apis/forms';\nexport const fetchFormList = createAsyncThunk('/form/list', async () => {\n  const response = getFormList();\n  return response;\n});\nexport const fetchSingleFormData = createAsyncThunk('/form/single', async ({\n  uuid\n}) => {\n  const response = getFormById({\n    uuid\n  });\n  return response;\n});\nexport const fethchFormResponse = createAsyncThunk('/form/response', async ({\n  uuid\n}) => {\n  const response = getFormResponse({\n    uuid\n  });\n  return response;\n});\nexport const formListSlice = createSlice({\n  name: 'form',\n  initialState: {\n    list: {},\n    formParams: {\n      name: '',\n      description: ''\n    },\n    uuid: '',\n    singleform: {},\n    responses: []\n  },\n  reducers: {\n    saveForm(state, action) {\n      const {\n        name,\n        description\n      } = action.payload;\n      state.formParams = {\n        name,\n        description\n      };\n    },\n\n    saveuuid(state, action) {\n      const {\n        uuid\n      } = action.payload;\n      state.uuid = uuid;\n    }\n\n  },\n  extraReducers: {\n    [fetchFormList.fulfilled]: (state, action) => {\n      state.list = action.payload;\n    },\n    [fetchSingleFormData.fulfilled]: (state, action) => {\n      state.singleform = action.payload;\n    },\n    [fethchFormResponse.fulfilled]: (state, action) => {\n      state.responses = action.payload;\n    }\n  }\n});\nexport const {\n  saveForm,\n  saveuuid\n} = formListSlice.actions;\nexport default formListSlice.reducer;","map":{"version":3,"sources":["/Users/shen/JOLI/redux/slices/formsSlice.js"],"names":["createAsyncThunk","createSlice","getFormList","getFormById","getFormResponse","fetchFormList","response","fetchSingleFormData","uuid","fethchFormResponse","formListSlice","name","initialState","list","formParams","description","singleform","responses","reducers","saveForm","state","action","payload","saveuuid","extraReducers","fulfilled","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,eAAnC,QAA0D,kBAA1D;AAEA,OAAO,MAAMC,aAAa,GAAGL,gBAAgB,CAAC,YAAD,EAAe,YAAY;AACtE,QAAMM,QAAQ,GAAGJ,WAAW,EAA5B;AACA,SAAOI,QAAP;AACD,CAH4C,CAAtC;AAKP,OAAO,MAAMC,mBAAmB,GAAGP,gBAAgB,CAAC,cAAD,EAAiB,OAAO;AAAEQ,EAAAA;AAAF,CAAP,KAAoB;AACtF,QAAMF,QAAQ,GAAGH,WAAW,CAAC;AAAEK,IAAAA;AAAF,GAAD,CAA5B;AACA,SAAOF,QAAP;AACD,CAHkD,CAA5C;AAKP,OAAO,MAAMG,kBAAkB,GAAGT,gBAAgB,CAAC,gBAAD,EAAmB,OAAO;AAAEQ,EAAAA;AAAF,CAAP,KAAoB;AACvF,QAAMF,QAAQ,GAAGF,eAAe,CAAC;AAAEI,IAAAA;AAAF,GAAD,CAAhC;AACA,SAAOF,QAAP;AACD,CAHiD,CAA3C;AAKP,OAAO,MAAMI,aAAa,GAAGT,WAAW,CAAC;AACvCU,EAAAA,IAAI,EAAE,MADiC;AAEvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE,EADM;AAEZC,IAAAA,UAAU,EAAE;AACVH,MAAAA,IAAI,EAAE,EADI;AAEVI,MAAAA,WAAW,EAAE;AAFH,KAFA;AAMZP,IAAAA,IAAI,EAAE,EANM;AAOZQ,IAAAA,UAAU,EAAE,EAPA;AAQZC,IAAAA,SAAS,EAAC;AARE,GAFyB;AAYvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACtB,YAAM;AAAEV,QAAAA,IAAF;AAAQI,QAAAA;AAAR,UAAwBM,MAAM,CAACC,OAArC;AACAF,MAAAA,KAAK,CAACN,UAAN,GAAmB;AACjBH,QAAAA,IADiB;AAEjBI,QAAAA;AAFiB,OAAnB;AAID,KAPO;;AAQRQ,IAAAA,QAAQ,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACtB,YAAM;AAAEb,QAAAA;AAAF,UAAWa,MAAM,CAACC,OAAxB;AACAF,MAAAA,KAAK,CAACZ,IAAN,GAAaA,IAAb;AACD;;AAXO,GAZ6B;AAyBvCgB,EAAAA,aAAa,EAAE;AACb,KAACnB,aAAa,CAACoB,SAAf,GAA2B,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACP,IAAN,GAAaQ,MAAM,CAACC,OAApB;AACD,KAHY;AAIb,KAACf,mBAAmB,CAACkB,SAArB,GAAiC,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACJ,UAAN,GAAmBK,MAAM,CAACC,OAA1B;AACD,KANY;AAOb,KAACb,kBAAkB,CAACgB,SAApB,GAAgC,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACH,SAAN,GAAkBI,MAAM,CAACC,OAAzB;AACD;AATY;AAzBwB,CAAD,CAAjC;AAsCP,OAAO,MAAM;AAAEH,EAAAA,QAAF;AAAYI,EAAAA;AAAZ,IAAyBb,aAAa,CAACgB,OAA7C;AAEP,eAAehB,aAAa,CAACiB,OAA7B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nimport { getFormList, getFormById, getFormResponse } from '../../apis/forms';\n\nexport const fetchFormList = createAsyncThunk('/form/list', async () => {\n  const response = getFormList();\n  return response;\n});\n\nexport const fetchSingleFormData = createAsyncThunk('/form/single', async ({ uuid }) => {\n  const response = getFormById({ uuid });\n  return response;\n});\n\nexport const fethchFormResponse = createAsyncThunk('/form/response', async ({ uuid }) => {\n  const response = getFormResponse({ uuid });\n  return response;\n});\n\nexport const formListSlice = createSlice({\n  name: 'form',\n  initialState: {\n    list: {},\n    formParams: {\n      name: '',\n      description: '',\n    },\n    uuid: '',\n    singleform: {},\n    responses:[]\n  },\n  reducers: {\n    saveForm(state, action) {\n      const { name, description } = action.payload;\n      state.formParams = {\n        name,\n        description,\n      };\n    },\n    saveuuid(state, action) {\n      const { uuid } = action.payload;\n      state.uuid = uuid;\n    },\n  },\n  extraReducers: {\n    [fetchFormList.fulfilled]: (state, action) => {\n      state.list = action.payload;\n    },\n    [fetchSingleFormData.fulfilled]: (state, action) => {\n      state.singleform = action.payload;\n    },\n    [fethchFormResponse.fulfilled]: (state, action) => {\n      state.responses = action.payload;\n    }\n  }\n});\n\nexport const { saveForm, saveuuid } = formListSlice.actions;\n\nexport default formListSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}